/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface NftMarketplaceInterface extends ethers.utils.Interface {
  functions: {
    "buyItem(address,uint256)": FunctionFragment;
    "cancelListing(address,uint256)": FunctionFragment;
    "getListing(address,uint256)": FunctionFragment;
    "getProceeds(address)": FunctionFragment;
    "listItem(address,uint256,uint256)": FunctionFragment;
    "updateListing(address,uint256,uint256)": FunctionFragment;
    "withdrawProceeds()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buyItem",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelListing",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getListing",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getProceeds", values: [string]): string;
  encodeFunctionData(
    functionFragment: "listItem",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateListing",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawProceeds",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "buyItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getListing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProceeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawProceeds",
    data: BytesLike
  ): Result;

  events: {
    "ItemBought(address,address,uint256,uint256)": EventFragment;
    "ItemCanceled(address,address,uint256)": EventFragment;
    "ItemListed(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ItemBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemListed"): EventFragment;
}

export class NftMarketplace extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: NftMarketplaceInterface;

  functions: {
    buyItem(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "buyItem(address,uint256)"(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    cancelListing(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelListing(address,uint256)"(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getListing(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[BigNumber, string] & { price: BigNumber; seller: string }]>;

    "getListing(address,uint256)"(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[BigNumber, string] & { price: BigNumber; seller: string }]>;

    getProceeds(
      seller: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getProceeds(address)"(
      seller: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    listItem(
      nftAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "listItem(address,uint256,uint256)"(
      nftAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateListing(
      nftAddress: string,
      tokenId: BigNumberish,
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateListing(address,uint256,uint256)"(
      nftAddress: string,
      tokenId: BigNumberish,
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawProceeds(overrides?: Overrides): Promise<ContractTransaction>;

    "withdrawProceeds()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  buyItem(
    nftAddress: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "buyItem(address,uint256)"(
    nftAddress: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  cancelListing(
    nftAddress: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelListing(address,uint256)"(
    nftAddress: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getListing(
    nftAddress: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { price: BigNumber; seller: string }>;

  "getListing(address,uint256)"(
    nftAddress: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { price: BigNumber; seller: string }>;

  getProceeds(seller: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getProceeds(address)"(
    seller: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  listItem(
    nftAddress: string,
    tokenId: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "listItem(address,uint256,uint256)"(
    nftAddress: string,
    tokenId: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateListing(
    nftAddress: string,
    tokenId: BigNumberish,
    newPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateListing(address,uint256,uint256)"(
    nftAddress: string,
    tokenId: BigNumberish,
    newPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawProceeds(overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawProceeds()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    buyItem(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "buyItem(address,uint256)"(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelListing(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelListing(address,uint256)"(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getListing(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { price: BigNumber; seller: string }>;

    "getListing(address,uint256)"(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { price: BigNumber; seller: string }>;

    getProceeds(seller: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getProceeds(address)"(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listItem(
      nftAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "listItem(address,uint256,uint256)"(
      nftAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateListing(
      nftAddress: string,
      tokenId: BigNumberish,
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateListing(address,uint256,uint256)"(
      nftAddress: string,
      tokenId: BigNumberish,
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawProceeds(overrides?: CallOverrides): Promise<void>;

    "withdrawProceeds()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    ItemBought(
      buyer: string | null,
      nftAddress: string | null,
      tokenId: BigNumberish | null,
      price: null
    ): EventFilter;

    ItemCanceled(
      seller: string | null,
      nftAddress: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    ItemListed(
      seller: string | null,
      nftAddress: string | null,
      tokenId: BigNumberish | null,
      price: null
    ): EventFilter;
  };

  estimateGas: {
    buyItem(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "buyItem(address,uint256)"(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    cancelListing(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelListing(address,uint256)"(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getListing(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getListing(address,uint256)"(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProceeds(seller: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getProceeds(address)"(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listItem(
      nftAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "listItem(address,uint256,uint256)"(
      nftAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateListing(
      nftAddress: string,
      tokenId: BigNumberish,
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateListing(address,uint256,uint256)"(
      nftAddress: string,
      tokenId: BigNumberish,
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawProceeds(overrides?: Overrides): Promise<BigNumber>;

    "withdrawProceeds()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    buyItem(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "buyItem(address,uint256)"(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    cancelListing(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelListing(address,uint256)"(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getListing(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getListing(address,uint256)"(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProceeds(
      seller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProceeds(address)"(
      seller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listItem(
      nftAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "listItem(address,uint256,uint256)"(
      nftAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateListing(
      nftAddress: string,
      tokenId: BigNumberish,
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateListing(address,uint256,uint256)"(
      nftAddress: string,
      tokenId: BigNumberish,
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawProceeds(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdrawProceeds()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
